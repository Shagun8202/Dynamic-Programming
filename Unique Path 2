int mod = (int)(1e9 + 7);
int solve(int i,int j,vector< vector< int> > &mat,vector< vector< int> > &dp){
    if(i==0 && j==0){
        return 1;
    } 
    if(i<0 || j< 0 || mat[i][j]== -1){
        return 0;
    }
    if(dp[i][j] != -1){
        return dp[i][j];
    }
    int up = solve(i-1,j,mat,dp)%mod;
    int left = solve(i,j-1,mat,dp)%mod;
    dp[i][j] = (up+ left)%mod;
    return dp[i][j];
}
int solve2(int i,int j,vector<vector<int> > &mat){
//   
    int dp[i][j];
    for(int n = 0; n<i ; n++){
        for(int m = 0;m< j; m++){
              if( mat[n][m]== -1){
                dp[n][m] = 0;
              }
            else if(n==0 && m==0){
                dp[n][m] =1;
            }
            else{
                int up = 0;
                int left = 0;
                if(n>0)
                  up = dp[n-1][m];
                if(m>0)
                  left = dp[n][m-1];
                 dp[n][m] = (up+ left)%mod;
            }
        }
    }
    
    return dp[i-1][j-1];
}
int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    vector<vector<int>> dp(n,vector<int>(m,-1));
    int ans = solve2(n,m,mat );
    return ans;
}
